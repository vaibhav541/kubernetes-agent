# =============================================================================
# KUBERGAURD - AI Agent for Kubernetes Monitoring and Self-Healing
# Environment Configuration Template
# =============================================================================

# Copy this file to .env and fill in your actual values
# cp .env.example .env

# -----------------------------------------------------------------------------
# AI/LLM Configuration
# -----------------------------------------------------------------------------

# OpenAI API Configuration (if using OpenAI)
OPENAI_API_KEY=your_openai_api_key_here

# Anthropic API Configuration (currently used by the agent)
ANTHROPIC_API_KEY=your_anthropic_api_key_here

# Azure OpenAI Configuration (if using Azure OpenAI)
# AZURE_OPENAI_API_KEY=your_azure_openai_api_key_here
# AZURE_OPENAI_ENDPOINT=https://your-resource.openai.azure.com/
# AZURE_OPENAI_DEPLOYMENT=gpt-4o

# -----------------------------------------------------------------------------
# GitHub Integration
# -----------------------------------------------------------------------------

# GitHub API Configuration
GITHUB_TOKEN=your_github_personal_access_token_here
GITHUB_OWNER=your_github_username_or_org
GITHUB_REPO=kubergaurd

# -----------------------------------------------------------------------------
# Agent Configuration
# -----------------------------------------------------------------------------

# Maximum number of pod restarts per day before triggering code analysis
MAX_RESTARTS_PER_DAY=10

# Number of restarts that triggers code analysis (should be less than MAX_RESTARTS_PER_DAY)
ANALYSIS_THRESHOLD=4

# CPU usage threshold percentage (lowered for testing)
CPU_THRESHOLD=10

# Memory usage threshold in bytes (500MB)
MEMORY_THRESHOLD=600000000

# -----------------------------------------------------------------------------
# MCP Server URLs (Internal Docker Network)
# -----------------------------------------------------------------------------

# Kubernetes MCP Server
KUBERNETES_MCP_URL=http://kubernetes-mcp:5001

# Prometheus MCP Server  
PROMETHEUS_MCP_URL=http://prometheus-mcp:5002

# Grafana MCP Server
GRAFANA_MCP_URL=http://grafana-mcp:5003

# GitHub MCP Server
GITHUB_MCP_URL=http://github-mcp:5004

# -----------------------------------------------------------------------------
# External Service URLs
# -----------------------------------------------------------------------------

# Prometheus Server URL
PROMETHEUS_URL=http://prometheus:9090

# Grafana Server URL
GRAFANA_URL=http://grafana:3000

# Grafana API Credentials (default admin credentials)
GRAFANA_API_KEY=admin:admin

# Test Application URL
TEST_APP_URL=http://test-app:8000

# Agent API URL
AGENT_URL=http://agent:8000

# API Backend URL
API_URL=http://agent:8000

# -----------------------------------------------------------------------------
# Grafana Configuration
# -----------------------------------------------------------------------------

# Grafana Admin Password
GF_SECURITY_ADMIN_PASSWORD=admin

# Disable user sign up
GF_USERS_ALLOW_SIGN_UP=false

# -----------------------------------------------------------------------------
# Development/Debug Configuration
# -----------------------------------------------------------------------------

# Environment (development, staging, production)
ENVIRONMENT=development

# Debug mode
DEBUG=true

# Log level (DEBUG, INFO, WARNING, ERROR)
LOG_LEVEL=INFO

# -----------------------------------------------------------------------------
# Docker Network Configuration
# -----------------------------------------------------------------------------

# Docker network name (used by docker-compose)
COMPOSE_PROJECT_NAME=kubergaurd

# -----------------------------------------------------------------------------
# Optional: External Monitoring Integration
# -----------------------------------------------------------------------------

# Slack webhook for notifications (optional)
# SLACK_WEBHOOK_URL=https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK

# Email configuration for notifications (optional)
# SMTP_SERVER=smtp.gmail.com
# SMTP_PORT=587
# SMTP_USERNAME=your_email@gmail.com
# SMTP_PASSWORD=your_app_password
# EMAIL_FROM=your_email@gmail.com
# EMAIL_TO=admin@yourcompany.com

# -----------------------------------------------------------------------------
# Security Configuration
# -----------------------------------------------------------------------------

# JWT Secret for API authentication (generate a secure random string)
# JWT_SECRET=your_jwt_secret_here

# API Rate limiting
# RATE_LIMIT_PER_MINUTE=60

# -----------------------------------------------------------------------------
# Kubernetes Configuration
# -----------------------------------------------------------------------------

# Default namespace for monitoring
DEFAULT_NAMESPACE=default

# Kubeconfig path (if running outside cluster)
# KUBECONFIG=/path/to/your/kubeconfig

# -----------------------------------------------------------------------------
# Database Configuration (if needed for persistent storage)
# -----------------------------------------------------------------------------

# SQLite database path (for incident storage)
# DATABASE_URL=sqlite:///./kubergaurd.db

# PostgreSQL configuration (if using PostgreSQL instead of in-memory storage)
# DATABASE_URL=postgresql://username:password@localhost:5432/kubergaurd
# DB_HOST=localhost
# DB_PORT=5432
# DB_NAME=kubergaurd
# DB_USER=username
# DB_PASSWORD=password

# -----------------------------------------------------------------------------
# Monitoring and Observability
# -----------------------------------------------------------------------------

# Enable metrics collection
ENABLE_METRICS=true

# Metrics port
METRICS_PORT=8090

# Health check interval in seconds
HEALTH_CHECK_INTERVAL=30

# -----------------------------------------------------------------------------
# Feature Flags
# -----------------------------------------------------------------------------

# Enable automatic pod restarts
ENABLE_AUTO_RESTART=true

# Enable GitHub issue creation
ENABLE_GITHUB_ISSUES=true

# Enable GitHub PR creation
ENABLE_GITHUB_PRS=true

# Enable Grafana annotations
ENABLE_GRAFANA_ANNOTATIONS=true

# Enable code analysis
ENABLE_CODE_ANALYSIS=true

# -----------------------------------------------------------------------------
# Performance Tuning
# -----------------------------------------------------------------------------

# Agent workflow timeout in seconds
AGENT_TIMEOUT=300

# HTTP request timeout in seconds
HTTP_TIMEOUT=30

# Maximum concurrent workflows
MAX_CONCURRENT_WORKFLOWS=5
